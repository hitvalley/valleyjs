var Valley = {};

Valley.basePath = __dirname;
Valley.conPath = Valley.basePath + '/controllers/';
Valley.viewPath = Valley.basePath + '/views/';

Valley.config = function(config){
  var config = config || {};
  this.basePath = config.basePath || __dirname;
};

Valley.define = function(deps, callback, module) {
  var basePath = this.basePath;
  var define = require('amdefine')(module);
  var realDeps = [];
  deps.forEach(function(n, i){
    var name = n.endsWith('.js') ? n : (n + '.js');
    var path = name.startsWith('.') ? name : (basePath + '/' + name);
    realDeps.push(path);
  });
  //console.log(realDeps);
  return define(realDeps, callback);
};

Valley.extend = function() {
  var options, name, src, copy, copyIsArray, clone,
    target = arguments[0] || {},
    i = 1,
    length = arguments.length,
    deep = false;

  // Handle a deep copy situation
  if ( typeof target === "boolean" ) {
    deep = target;
    target = arguments[1] || {};
    // skip the boolean and the target
    i = 2;
  }

  // Handle case when target is a string or something (possible in deep copy)
  if ( typeof target !== "object" && !Valley.isFunction(target) ) {
    target = {};
  }

  // extend jQuery itself if only one argument is passed
  if ( length === i ) {
    target = this;
    --i;
  }

  for ( ; i < length; i++ ) {
    // Only deal with non-null/undefined values
    if ( (options = arguments[ i ]) != null ) {
      // Extend the base object
      for ( name in options ) {
        src = target[ name ];
        copy = options[ name ];

        // Prevent never-ending loop
        if ( target === copy ) {
          continue;
        }

        // Recurse if we're merging plain objects or arrays
        if ( deep && copy && ( Valley.isPlainObject(copy) || (copyIsArray = Valley.isArray(copy)) ) ) {
          if ( copyIsArray ) {
            copyIsArray = false;
            clone = src && Valley.isArray(src) ? src : [];

          } else {
            clone = src && Valley.isPlainObject(src) ? src : {};
          }

          // Never move original objects, clone them
          target[ name ] = Valley.extend( deep, clone, copy );

        // Don't bring in undefined values
        } else if ( copy !== undefined ) {
          target[ name ] = copy;
        }
      }
    }
  }

  // Return the modified object
  return target;
};

var class2type = {},
  core_push = Array.prototype.push,
  core_slice = Array.prototype.slice,
  core_indexOf = Array.prototype.indexOf,
  core_toString = Object.prototype.toString,
  core_hasOwn = Object.prototype.hasOwnProperty,
  core_trim = String.prototype.trim;
"Boolean Number String Function Array Date RegExp Object".split(" ").forEach(function(name, i){
  class2type["[object " + name + "]"] = name.toLowerCase();
});

Valley.type = function( obj ) {
  return obj == null ?
      String( obj ) :
      class2type[ core_toString.call(obj) ] || "object";
}

Valley.isFunction = function(obj) {
  return Valley.type(obj) === "function";
};

Valley.isPlainObject = function(obj) {
  // Must be an Object.
  // Because of IE, we also have to check the presence of the constructor property.
  // Make sure that DOM nodes and window objects don't pass through, as well
  if ( !obj || Valley.type(obj) !== "object") {
    return false;
  }

  try {
    // Not own constructor property must be Object
    if ( obj.constructor &&
      !core_hasOwn.call(obj, "constructor") &&
      !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
      return false;
    }
  } catch ( e ) {
    // IE8,9 Will throw exceptions on certain host objects #9897
    return false;
  }

  // Own properties are enumerated firstly, so to speed up,
  // if last one is own, then all properties are own.

  var key;
  for ( key in obj ) {}

  return key === undefined || core_hasOwn.call( obj, key );
}

Valley.isArray = Array.isArray || function(obj) {
  return Valley.type(obj) === "array";
}

global.Valley = Valley;
exports.Valley = Valley;
